<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-02-01T16:48:43+00:00</updated><id>/</id><title type="html">Keaton Burleson</title><subtitle>This is Keaton Burleson's website</subtitle><entry><title type="html">macOS Imaging and Testing</title><link href="/2018/08/10/moving-forward-with-macos-imaging.html" rel="alternate" type="text/html" title="macOS Imaging and Testing" /><published>2018-08-10T00:00:00+00:00</published><updated>2018-08-10T00:00:00+00:00</updated><id>/2018/08/10/moving-forward-with-macos-imaging</id><content type="html" xml:base="/2018/08/10/moving-forward-with-macos-imaging.html">&lt;h2 id=&quot;prologue&quot;&gt;Prologue&lt;/h2&gt;

&lt;p&gt;Now that macOS Imaging is dead (and &lt;a href=&quot;https://support.apple.com/en-us/HT202770#sections&quot;&gt;is never coming back&lt;/a&gt;), I had to figure out a solution to replace DeployStudio here at ER2. Currently, we use a basic combination of cocoaDialog and bash to also mark the condition of any machine booted before imaging. The system is logged in our internal testing system and a label is adhered containing the specs. Then the machine is passed on to be cleaned before sale to a customer. This is great and all, but what if the machine has underlying issues, or severely overheats under strain &lt;em&gt;not&lt;/em&gt; expressed during an install? Having a customer shipped what is essentially a defective laptop is the worst case scenario, but that inherently generates a lot of &lt;em&gt;waste&lt;/em&gt; (at work, we are actively encouraged to eliminate waste)&lt;/p&gt;

&lt;h2 id=&quot;building-a-netboot-environment&quot;&gt;Building a NetBoot environment&lt;/h2&gt;

&lt;p&gt;The first idea was running a NetBoot recovery environment (similar to how Imagr or DeployStudio operates). Honestly, this is the way to do it. It boots extremely fast, only the bare minimum frameworks are loaded. For us, we get system specs using the &lt;code class=&quot;highlighter-rouge&quot;&gt;system_profiler&lt;/code&gt; command, but in High Sierra‚Äôs recovery environment, you do not have access to this command. The framework is &lt;em&gt;not&lt;/em&gt; included for some bizarre reason, but its Apple ü§∑üèª‚Äç‚ôÇÔ∏è.&lt;/p&gt;

&lt;p&gt;Another caveat is that full acceleration GPU drivers are not loaded. Again, its to make the environment lighter and, I‚Äôm assuming, to allow it to boot in worse case scenarios where the GPU might be crippled, or the discrete GPU is disabled. Pure speculation on my part, however. The lack of full acceleration GPU drivers was another big problem for us. We use UNIGINE‚Äôs &lt;a href=&quot;https://benchmark.unigine.com/heaven&quot;&gt;Heaven&lt;/a&gt; GPU stress-testing software to spot potential GPU/overheating problems.&lt;/p&gt;

&lt;p&gt;So, really, the next solution was a full bootable OS with tools built into the image. Sure, you could add GPU acceleration to the existing Recovery environment. And then you‚Äôd add the required extensions. Then, you‚Äôve opened a can of worms. I do not know what I was doing wrong, but I couldn‚Äôt get a Recovery environment to properly boot with the added extensions that I needed. To make the base image required, I used a modified version of AutoCasperNBI. The modifications were simple‚ÄìAutoCasperNBI is an AppleScript-based project. If you do not know AppleScript, I‚Äôd recommend learning it, as it can make somethings like on boarding prompts, run-once applications, and droplets MUCH simpler than tackling a full Cocoa project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/Screen%20Shot%202018-08-12%20at%2012.08.25%20PM.png&quot; alt=&quot;Screen Shot 2018-08-12 at 12.08.25 PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The modifications essentially disabled the Casper part of the project while keeping everything else. I didn‚Äôt use Casper, nor did I need it. I just needed to make an NBI easily. I liked it the best (even with having to make modifications), since its easy to document for. I‚Äôd like to assume the person who will eventually replace me would appreciate a GUI-based application with screen shots to guide him/her through rebuilding an NBI.&lt;/p&gt;

&lt;h2 id=&quot;tools-and-testing&quot;&gt;Tools and Testing&lt;/h2&gt;

&lt;p&gt;Great. Perfect. We now have a fully bootable NBI. Next, we have to load it up with tools. As mentioned above, we use Heaven for GPU stress testing. For CPUs, we use &lt;a href=&quot;https://www.mersenne.org/download/&quot;&gt;GIMPS Prime95&lt;/a&gt; and assign it ‚Äòwork‚Äô for 15 minutes. We time both Heaven and Prime95 with a custom application called &lt;a href=&quot;https://github.com/128keaton/BarTimer&quot;&gt;BarTimer&lt;/a&gt;. To test the iSight camera, we simply use Photo Booth. Recording a video and playing it back tests speakers as well, knocking two birds out with one stone. To test USB ports, we use an application called &lt;a href=&quot;https://github.com/128keaton/USBDetect&quot;&gt;USBDetect&lt;/a&gt; that plays a sound and displays a notification when a USB device is plugged in and recognized. Finally, when testing is complete, and the machine as been evaluated, a label is printed and the machine is added to an internal device tracker that keeps up with specs and configurations.&lt;/p&gt;

&lt;h2 id=&quot;installing-macos&quot;&gt;Installing macOS&lt;/h2&gt;

&lt;p&gt;Arguably, the best way to install OR upgrade to macOS High Sierra is using Apple‚Äôs &lt;code class=&quot;highlighter-rouge&quot;&gt;startosinstall&lt;/code&gt; tool. It is a fantastic command line utility that will upgrade the machine‚Äôs firmware to allow booting from APFS drives. It also installs macOS in the way Apple likes‚Äìit behaves exactly how the installation application does. This is a great way to start a macOS install. However, I didn‚Äôt need this as we were starting from a full OS. But, we didn‚Äôt bundle the install application inside the NetBoot image. This would be irresponsible‚Äìit would double the image size AND require the image to update when a new version of macOS came out. The way we currently utilize is having a start up script (we actually use &lt;a href=&quot;https://github.com/chilcote/outset&quot;&gt;Outset&lt;/a&gt; for this, fantastic utility) that mounts an NFS share containing the latest version of macOS. Then, a DMG containing the installer application is mounted, ready to install on the client machine.&lt;/p&gt;

&lt;h2 id=&quot;mocking-macos-utilities&quot;&gt;Mocking ‚ÄòmacOS Utilities‚Äô&lt;/h2&gt;

&lt;p&gt;We wanted a simple way to launch applications and establish a ‚Äòworkflow‚Äô of sorts. Sure, you could just use the Dock and Finder, but to an untrained user, it can easily be confusing. Our solution was a custom application, similar to the macOS Utilities you see on the Recovery partition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/screenshot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the bottom, there is a button to launch a ‚ÄòmacOS Install Kickoff‚Äô application. The utilities pane waits for the &lt;code class=&quot;highlighter-rouge&quot;&gt;/Volumes/Install macOS High Sierra&lt;/code&gt; volume to become available. The &lt;a href=&quot;https://github.com/128keaton/macOS-Installer-Kickoff&quot;&gt;kickoff&lt;/a&gt; application checks for any existing APFS setup, removes it (since we are installing from Sierra), and erases the drive, readying it for install.&lt;/p&gt;

&lt;h2 id=&quot;final-notes&quot;&gt;Final Notes&lt;/h2&gt;

&lt;p&gt;Moving forward, with T2 Apple machines (which do not allow booting from an external volume at all), the majority of this setup can be moved to an external drive and the applications/scripts can be used in a recovery environment (minus Heaven).&lt;/p&gt;

&lt;p&gt;If anyone reading this is currently testing machines similar to above, I‚Äôd love to see your setup! Always looking for improvements!&lt;/p&gt;</content><author><name></name></author><summary type="html">Prologue</summary></entry><entry><title type="html">Yahoo! Widgets in 2017</title><link href="/2017/09/08/yahoo-widgets-2017.html" rel="alternate" type="text/html" title="Yahoo! Widgets in 2017" /><published>2017-09-08T16:59:00+00:00</published><updated>2017-09-08T16:59:00+00:00</updated><id>/2017/09/08/yahoo-widgets-2017</id><content type="html" xml:base="/2017/09/08/yahoo-widgets-2017.html">&lt;p&gt;&lt;strong&gt;Stupid Alert&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Today I had a weird memory: a bouncy ball widget on my old Thinkpad back in 2006/7. I think I heard the funny sound the Yahoo! Widgets drawer made. Whatever. Anyway, it got me thinking. What happened to Yahoo! Widgets?&lt;/p&gt;

&lt;p&gt;So way back in ‚Äò03, Yahoo! Widgets was a Mac-Exclusive program called &lt;em&gt;Konfabulator&lt;/em&gt;. It was not written by a Yahoo! Team, but by a spunky group of developers by the names: Arlo Rose, Perry Clarke, and Ed Voas. All the little widgets were Javascript applications (more or less) so this pre-dates the ‚ÄòWeb app as native app‚Äô garbage all over the place today.&lt;/p&gt;

&lt;p&gt;In 2004, a Windows version was released, with a few minor difficulties along the lines of certain widgets only being for certain platforms. Finally, in 2005 a more seamless version, Konfabulator 2.0, was released to the world. The program had an &lt;em&gt;explosive&lt;/em&gt; success, the developers began working on it full time as a result. Konfabulator had struck gold.&lt;/p&gt;

&lt;p&gt;Around that time, Yahoo! was looking for an innovative way to introduce developers to their web API. Yahoo! offered XML quieries for basic information like weather, stocks, news, and searches. Konfabulator was the perfect solution. Already using then-modern web technologies like XML and JavaScript, the widget engine would fit perfectly with Yahoo‚Äôs new API.&lt;/p&gt;

&lt;p&gt;On July 25th, 2005, Yahoo! officially aquired Konfabulator and it‚Äôs fiery developer team, and on May 6th 2006, almost a full year later, the Yahoo! Widget Engine was borne upon the world.&lt;/p&gt;

&lt;p&gt;Slowly, though, the original Konfabulator team left. August 2006, Perry Clark left, followed by Arlo Rose, and finally, in August of 2008, Ed Voas.&lt;/p&gt;

&lt;p&gt;In 2012, Yahoo! announced that they would no longer support their widget engine, nor would they keep the Widget Gallery propped up.&lt;/p&gt;

&lt;p&gt;Since then, the Widget engine has remained largely functional, aside from the Yahoo! Weather Widget no longer functioning when the API was updated in May of 2016, easily one of the most popular of the default Yahoo! Widgets suite.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;loved&lt;/em&gt; Yahoo! Widgets (though, now knowing they are webapps has slightly tained my love for them) and I wanted a way to get them on my Mac. Fortunately, the binary was easily found &lt;a href=&quot;https://rickyromero.com/widgets/&quot;&gt;here&lt;/a&gt;, getting running was another task and a half.&lt;/p&gt;

&lt;p&gt;First launch puts the widget smack dab in the middle of my screen but the beloved widget dock is nowhere to be seen! Nor is the menu bar icon. What the!? A quick glance into the Console app shows crash reports for Yahoo! Widgets. Uh oh :(. Its easy to forget how long ago the last version was released, circa OS X 10.5 Ouch. Since then OS X permissions have evolved quite a bit. The exception type was ‚ÄòEXC_BAD_ACCESS (SIGSEGV)‚Äô which is a permissions issue. &lt;em&gt;Sad trombone&lt;/em&gt;. I quickly disabled Gatekeepr just in case, but that didn‚Äôt do anything either. Hmm. What if I run it as root?&lt;/p&gt;

&lt;p&gt;Windows Vista and onward had a similar issue. The widgets require some deeper access to the OS because of the window layering (I believe). In Vista-10, volume control is broken because the widgets cannot call for a volume change without a UIC prompt, but its a webapp so.. you get the picture. Native-ness rules folks.&lt;/p&gt;

&lt;p&gt;Anyway, I ran it as root, and it worked!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.128keaton.com/widget-success.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, you yourself can do this. It is really buggy but it works once the widgets are up because I believe that the widgets are separate process. The actual Widget Engine is the buggy part.&lt;/p&gt;

&lt;p&gt;I even got my beloved dock noise back!&lt;/p&gt;

&lt;p&gt;Watch out for widgets that require API access back to Yahoo, they CAN crash the engine.&lt;/p&gt;

&lt;p&gt;Here is the command that I used to run the engine:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo /Applications/Yahoo\!\ Widgets.app/Contents/MacOS/Yahoo\!\ Widgets&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, I really want to get the Yahoo! Weather Widget working again, because after all, its just a &lt;a href=&quot;https://gist.github.com/128keaton/31c6887cb59ae0651b5e60e7c8cff38d&quot;&gt;webapp&lt;/a&gt;..&lt;/p&gt;

&lt;p&gt;But thats for another time.&lt;/p&gt;</content><author><name></name></author><summary type="html">Stupid Alert</summary></entry><entry><title type="html">How I got 3.1.2 on a 3G[s] from 2011</title><link href="/2017/04/12/how-i-got-312-on-a-3gs-from-2011.html" rel="alternate" type="text/html" title="How I got 3.1.2 on a 3G[s] from 2011" /><published>2017-04-12T00:56:57+00:00</published><updated>2017-04-12T00:56:57+00:00</updated><id>/2017/04/12/how-i-got-312-on-a-3gs-from-2011</id><content type="html" xml:base="/2017/04/12/how-i-got-312-on-a-3gs-from-2011.html">&lt;p&gt;&lt;img src=&quot;https://images.128keaton.com/iphone3gs3.1.2.jpg#stylized&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;See that? That is an iPhone 3G[s] running 3.1.2. What makes this special is that this is a &lt;em&gt;new boot ROM&lt;/em&gt; 3G[s] thats been downgraded. And, for the cherry on top, its an iPhone that shipped with iOS 5 originally. How did I do it?&lt;/p&gt;

&lt;p&gt;Just recently, a &lt;a href=&quot;https://twitter.com/axi0mX&quot;&gt;person&lt;/a&gt; on Twitter called ‚Äòaxi0mX‚Äô released the &lt;a href=&quot;https://github.com/axi0mX/alloc8&quot;&gt;alloc8&lt;/a&gt; boot ROM exploit affecting the new and old boot ROM 3G[s], though he recommends that the 24k exploit still be used on old boot ROM devices due to a &lt;a href=&quot;https://github.com/axi0mX/ipwndfu/blob/master/JAILBREAK-GUIDE.md#3-second-delays-when-using-a-phone-jailbroken-with-alloc8&quot;&gt;slow down&lt;/a&gt; that the alloc8 exploit introduces. Thankfully, this exploit is relatively easy to use, if you have the right tools&lt;/p&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Xcode Command Line tools (&lt;code class=&quot;highlighter-rouge&quot;&gt;xcode-select --install&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;(updated 4-20-2017)&lt;/strong&gt; A Mac running Mavericks or newer&lt;sup&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-1&quot;&gt;Step 1:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;(updated 4-12-2017)&lt;/strong&gt;
Time to install all the dependancies.
Open Terminal, then install pip/Python from Homebrew like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;--with-brewed-openssl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, install libusb, similar to how you installed Python, using Homebrew:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libusb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Quit Terminal and then reopen Terminal.&lt;/p&gt;

&lt;p&gt;Lastly, run this last command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pyusb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-2&quot;&gt;Step 2:&lt;/h2&gt;

&lt;p&gt;Navigate to a nice and safe directory in Terminal, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/Desktop&lt;/code&gt;. There, clone the ipwndfu repository:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/axi0mX/ipwndfu &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ipwndfu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-3&quot;&gt;Step 3:&lt;/h2&gt;

&lt;p&gt;Thanks to some oddities in libusb for El Capitan and Sierra, it is necessary to patch the binary we use. &lt;strong&gt;Only do this on El Capitan and Sierra&lt;/strong&gt;. Thankfully, axi0mX has made it pretty easy for us.
Verify that the version installed on your computer is the same one the patch is made for (1.0.21) by running this command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl sha1 /usr/local/Cellar/libusb/1.0.21/lib/libusb-1.0.0.dylib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the little string of numbers and letters (the hash) matches &lt;code class=&quot;highlighter-rouge&quot;&gt;02da61201c8f67b723bca5fb44b35797d1021625&lt;/code&gt; then you should be fine.&lt;/p&gt;

&lt;p&gt;Now, its time to patch. inside the ipwndfu directory, run&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bspatch /usr/local/Cellar/libusb/1.0.21/lib/libusb-1.0.0.dylib /usr/local/Cellar/libusb/1.0.21/lib/libusb-1.0.0.dylib libusb-patches/libusb-1.0.21-02da61201c8f67b723bca5fb44b35797d1021625.patch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, just to make sure that the patch was applied successfully, rerun this command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl sha1 /usr/local/Cellar/libusb/1.0.21/lib/libusb-1.0.0.dylib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The hash should be: &lt;code class=&quot;highlighter-rouge&quot;&gt;f356ee6052cd520b46ca50333b937ff2efe4477b&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;All good?&lt;/p&gt;

&lt;h2 id=&quot;step-4&quot;&gt;Step 4:&lt;/h2&gt;

&lt;p&gt;Now, it is time to generate a custom IPSW for your 3G[s]. Below is a table which breaks down the versions and tools to accomplish this.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Version&lt;/th&gt;
      &lt;th&gt;Tool&lt;/th&gt;
      &lt;th&gt;Success&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;iOS 3.1&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/axi0mX/PwnageTool-mirror/raw/master/PwnageTool_3.1.3.dmg&quot;&gt;PwnageTool 3.1.3&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;üòÄ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iOS 3.1.2/3&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/axi0mX/PwnageTool-mirror/raw/master/PwnageTool_3.1.5.dmg&quot;&gt;PwnageTool 3.1.5&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;üòÄ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iOS 4.0&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/axi0mX/PwnageTool-mirror/raw/master/PwnageTool_4.01.dmg&quot;&gt;PwnageTool 4.01&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;üòÄ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iOS 4.3.3&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.iphonehacks.com/download-redsn0w&quot;&gt;redsn0w 0.9.15 beta 3&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;üò´&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iOS 5.0&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.iphonehacks.com/download-redsn0w&quot;&gt;redsn0w 0.9.15 beta 3&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;üòÄ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iOS 5.0.1&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.iphonehacks.com/download-redsn0w&quot;&gt;redsn0w 0.9.15 beta 3&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;üòÄ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iOS 5.1&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.iphonehacks.com/download-redsn0w&quot;&gt;redsn0w 0.9.15 beta 3&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;üòÄ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iOS 5.1.1&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.iphonehacks.com/download-redsn0w&quot;&gt;redsn0w 0.9.15 beta 3&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;üòÄ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Notes on using redsn0w:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;During the process, redsn0w will ask you something along the lines of ‚ÄòWill this custom IPSW be used on a newer (fixed) version of the iPhone3GS?‚Äô. You must answer ‚Äòno‚Äô to create an IPSW laced with the 24Kpwn exploit, which is essential for alloc8.&lt;/p&gt;

&lt;p&gt;All the tools above will walk you through the IPSW creation, just don‚Äôt stray too far from the default options and you should be fine. I opted for 3.1.2, but thats my personal choice. I also downloaded my firmware file from &lt;a href=&quot;https://ipsw.me&quot;&gt;ipsw.me&lt;/a&gt;. Also, since we‚Äôre on the topic of downloading firmwares, you also need to download the 4.3.5 IPSW for your 3G[s] &lt;strong&gt;and place it in your ipwndfu folder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From there (again in your ipwndfu folder) run:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unzip &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; iPhone2,1_4.3.5_8L1_Restore.ipsw Firmware/dfu/iBSS.n88ap.RELEASE.dfu &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; n88ap-iBSS-4.3.5.img3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should be all set to run ipwndfu here pretty soon.&lt;/p&gt;

&lt;h2 id=&quot;step-5&quot;&gt;Step 5:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Note: if you installed all the pip dependancies with the Homebrew version, you must prepend &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; to the commands like I have done below&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Okay, here is where it got dodgy for me. The developer recommends you either use a computer with iTunes 11.1 or older, or use &lt;code class=&quot;highlighter-rouge&quot;&gt;idevicerestore&lt;/code&gt; to restore the custom firmware file to your 3G[s]. I tried getting idevicerestore to work, I compiled all what I needed, but it kept getting stuck. I gave up and just grabbed my trusty 17‚Äù PowerBook running 10.5.8 with iTunes 10. It took me twice to get it to work, but I‚Äôm writing this from the perspective of me restoring it with iTunes.&lt;/p&gt;

&lt;p&gt;I went ahead and transferred the custom IPSW to the machine, ready for restore. I had iTunes opened, raring to go.&lt;/p&gt;

&lt;p&gt;Now, plug the iPhone into the machine with the ipwndfu tools. Put the iPhone into DFU mode, which goes as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Turn the phone off.&lt;/li&gt;
  &lt;li&gt;Hold the power button for &lt;strong&gt;3&lt;/strong&gt; seconds.&lt;/li&gt;
  &lt;li&gt;Hold the home and power button for &lt;strong&gt;10&lt;/strong&gt; seconds.&lt;/li&gt;
  &lt;li&gt;Release the power button, but continue to hold the home button without releasing for &lt;strong&gt;15&lt;/strong&gt; more seconds.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, iTunes should popup complaining about a device in recovery.&lt;/p&gt;

&lt;p&gt;Go back to Terminal, and inside of the ipwndfu tools directory, run:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python ./ipwndfu &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It should output something like this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Yerba-Buena:ipwndfu keatonburleson&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python ./ipwndfu &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; based on limera1n exploit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;heap overflow&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; by geohot &lt;span class=&quot;k&quot;&gt;***&lt;/span&gt;
Found: CPID:8920 CPRV:15 CPFM:03 SCEP:03 BDID:00 ECID:XXXXXXXXXXXXXXXX SRTG:[iBoot-359.3.2]
Device is now &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;pwned DFU Mode.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great!&lt;/p&gt;

&lt;p&gt;Unplug the device, and quickly move it to the machine with iTunes &amp;lt;11.1, in my case, my PowerBook. iTunes should once again popup about a device in recovery. Now we‚Äôre rolling. Okay, deep breath. I‚Äôm assuming your iPhone is backed up if you care. Now we need to browse to our custom firmware. Hold down Shift (for Windows) or Alt/option (for Mac) and a file dialog should come up. Browse and select our custom firmware. The restoration process should begin. I had to do this process twice, not sure why, but when I finished, it showed no errors.&lt;/p&gt;

&lt;h2 id=&quot;step-6&quot;&gt;Step 6:&lt;/h2&gt;

&lt;p&gt;After your restore is complete, you should be at a black screen. Move the phone to the machine with the tools once again. Next, we‚Äôre running the same command as earlier to get it into a pwned DFU state:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python ./ipwndfu &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It should output something like this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Yerba-Buena:ipwndfu keatonburleson&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python ./ipwndfu &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; based on limera1n exploit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;heap overflow&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; by geohot &lt;span class=&quot;k&quot;&gt;***&lt;/span&gt;
Found: CPID:8920 CPRV:15 CPFM:03 SCEP:03 BDID:00 ECID:XXXXXXXXXXXXXXXX SRTG:[iBoot-359.3.2]
Device is now &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;pwned DFU Mode.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, run this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python ./ipwndfu &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which, in turn, should provide an output like this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Yerba-Buena:ipwndfu keatonburleson&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python ./ipwndfu &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;
Installing alloc8 exploit to NOR.
Dumping NOR, part 1/8.
Dumping NOR, part 2/8.
Dumping NOR, part 3/8.
Dumping NOR, part 4/8.
Dumping NOR, part 5/8.
Dumping NOR, part 6/8.
Dumping NOR, part 7/8.
Dumping NOR, part 8/8.
NOR backed up to file: nor-backups/nor-xxxxxxxxx-20170411-193959.dump
Sending iBSS.
Waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;iBSS to enter Recovery Mode.
Sending iBSS payload to flash NOR.
Sending run command.
If screen is not red, NOR was flashed successfully and device will reboot.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The whole process should take about 10 seconds, and your screen on your iPhone should be green for a considerable amount of that time.&lt;/p&gt;

&lt;p&gt;Thankfully, the developer provided some nice troubleshooting tips:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If there are any errors before the screen turned green, it is safe to try again.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the screen turns red, something went wrong while your phone was being flashed. Trying again probably won‚Äôt help.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully your phone should be booting whatever iOS you chose! Comment below if something bad happens or you discover another way to restore!&lt;/p&gt;

&lt;p&gt;If you are having issues running this command, check out &lt;a href=&quot;#troubleshooting&quot;&gt;Troubleshooting&lt;/a&gt; below.&lt;/p&gt;

&lt;h2 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;(added 4-12-2017)&lt;/p&gt;

&lt;p&gt;I had some friends try running the guide themselves, and they ran into some issues not covered.&lt;/p&gt;

&lt;h3 id=&quot;operation-timed-out&quot;&gt;Operation timed out&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images.128keaton.com/uhoh.jpg#stylized&quot; alt=&quot;&quot; /&gt;.&lt;/p&gt;

&lt;p&gt;My friend on Slack ran into this. Not sure if it is an environment issue, as I did not have Python installed via Homebrew. I just had OS X‚Äôs default install. If you‚Äôre wondering if you are using Homebrew Python, run this command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;which python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I added this to the guide, but I think it has something to do with the lack of OpenSSL in the default Python package. Running this in Terminal should fix that:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew update
brew &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;python
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;--with-brewed-openssl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/Homebrew/legacy-homebrew/issues/14497&quot;&gt;this&lt;/a&gt; GitHub issue.&lt;/p&gt;

&lt;p&gt;However, if you don‚Äôt want to really mess with Homebrew, or the proposed fix doesn‚Äôt work for you, here is another way.&lt;/p&gt;

&lt;p&gt;First, remove the Homebrew Python install.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then, close Terminal and reopen.&lt;/p&gt;

&lt;p&gt;In Terminal, navigate somewhere safe, like &lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/Desktop&lt;/code&gt;, and run:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; https://bootstrap.pypa.io/get-pip.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, run:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;python get-pip.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Make sure you‚Äôve installed libusb, and then install pyusb like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pyusb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hopefully that should get you running again.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;I‚Äôd like to give a major thanks to the developer for writing really good documentation in the first place, and another thanks for &lt;em&gt;creating&lt;/em&gt; this awesome open source jailbreak and boot ROM exploit for a device almost 9 years old.&lt;/p&gt;

&lt;p&gt;&lt;span id=&quot;1&quot; class=&quot;small&quot;&gt;&lt;sup&gt;1&lt;/sup&gt; there is a bug that the author hasn‚Äôt made progress fixing in versions older than OS X 10.9&lt;/span&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Travis CI and Jekyll</title><link href="/2017/04/05/travis-ci-and-jekyll.html" rel="alternate" type="text/html" title="Travis CI and Jekyll" /><published>2017-04-05T05:03:41+00:00</published><updated>2017-04-05T05:03:41+00:00</updated><id>/2017/04/05/travis-ci-and-jekyll</id><content type="html" xml:base="/2017/04/05/travis-ci-and-jekyll.html">&lt;h2 id=&quot;preface&quot;&gt;Preface:&lt;/h2&gt;
&lt;p&gt;When I first started blogging with Jekyll, my setup was a &lt;em&gt;wreck&lt;/em&gt;. I didn‚Äôt quite understand Liquid Templating, so there wasn‚Äôt a lot a reuse, tons of unnecessary CSS, and plenty of plain ol‚Äô HTML kludges. I still really liked Jekyll. It was fast, hosting for it was cheap, and free if you used GitHub Pages, which I didn‚Äôt at the time. The two things I didn‚Äôt like about Jekyll was the lack of portability, and of easy publishing.&lt;/p&gt;

&lt;p&gt;Easy publishing is really two things. One, I didn‚Äôt like having to clone my repo, run &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; and make sure everything carried over properly (side-note: as tempting as it may be, do not use submodules for any directory) and then building and publishing. Then, as I stated above, I wasn‚Äôt using GitHub Pages, so I basically compiled the site and uploaded the whole thing to my website. Terrible, right?&lt;/p&gt;

&lt;p&gt;And then, there is the problem of images. I like having some images in my posts, in fact, a decent amount of my posts revolve around images. If you roll your own hosting with Jekyll, its easy to take care of, but with GitHub pages, its a nightmare for portability, even with submodules. If you don‚Äôt have all your images when you build‚Äìwhy would Jekyll carry the images over into your site!&lt;/p&gt;

&lt;p&gt;Those two tidbits will be important in a minute after I explain the next part.&lt;/p&gt;

&lt;p&gt;Fast-forward to my blog, 2.0, I decided to ditch self hosting and migrate to GitHub for the simple ease of doing ‚Äúgit commit -m blah &amp;amp;&amp;amp; git push‚Äù and having GitHub do the dirty work. And this worked, pretty well. Remember my image heavy pages? Night. Mare. As it stands right now, my images directory on my web server is 119MB. 119MB I‚Äôd throw around on GitHub. Bleh, not fun for mobile blogging.&lt;/p&gt;

&lt;p&gt;Recently, I‚Äôd had enough blog posts that scrolling through them all was a pain. I decided a simple pagination plugin for Jekyll would suffice‚Äìuntil I learned that it wasn‚Äôt supported on GitHub Pages. ‚ÄúNo‚Äù I howled in rage. I did a quick bit of googling and learned that with a bit of Ruby, I could ~abuse~ use Travis to help with the heavier lifting, by-passing the building service of GitHub, and just taking advantage of that sweet, sweet hosting.&lt;/p&gt;

&lt;p&gt;Before I begin the how to part, I‚Äôd like to say I still use my web hosting for the images. In fact, that is a key part. I‚Äôd like to think that my script can be adapted to be used with another service, other than your own.&lt;/p&gt;

&lt;h2 id=&quot;how-to&quot;&gt;How-to:&lt;/h2&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;An image host that you can use with an API&lt;/li&gt;
  &lt;li&gt;Jekyll&lt;/li&gt;
  &lt;li&gt;Two branches on your public GitHub repo (gh-pages and a source repo)&lt;/li&gt;
  &lt;li&gt;Eyes&lt;/li&gt;
  &lt;li&gt;A personal access token&lt;/li&gt;
  &lt;li&gt;Travis access to your public GitHub repo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See where this is going?&lt;/p&gt;

&lt;p&gt;Basically, whenever you push your source branch to GitHub, Travis builds the site, and then pushes it to your gh-pages repo, precompiled. This opens up the door for so many more possibilities, like testing!&lt;/p&gt;

&lt;p&gt;Sure, the build times are a bit slower, but it works so much better!&lt;/p&gt;

&lt;p&gt;Here is an example of my .travis.yml file:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundler&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle install&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec rake site:deploy --quiet&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.1.2&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/* remove this line */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For that &lt;code class=&quot;highlighter-rouge&quot;&gt;secure&lt;/code&gt; bit, remove that whole line, and run this command:
&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install travis&lt;/code&gt;
and then:
 &lt;code class=&quot;highlighter-rouge&quot;&gt;travis encrypt 'GIT_NAME=&quot;YOUR_USERNAME&quot; GIT_EMAIL=&quot;YOUR_EMAIL&quot; GH_TOKEN=YOUR_TOKEN'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure you replace the appropriate variables.&lt;/p&gt;

&lt;p&gt;Now, for an exerpt from the Rakefile:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deploy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Detect pull request&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'TRAVIS_PULL_REQUEST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Pull request detected. Not proceeding with deploy.'&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Configure git if this is run in Travis CI&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'TRAVIS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git config --global user.name '&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'GIT_NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git config --global user.email '&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'GIT_EMAIL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'git config --global push.default simple'&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Make sure destination folder exists as git repo&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;check_destination&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git checkout &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SOURCE_BRANCH&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'destination'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git checkout &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DESTINATION_BRANCH&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Generate the site&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundle exec jekyll build'&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Commit and push to github&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`git log`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/[a-z0-9]{40}/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CONFIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'destination'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'git add --all .'&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git commit -m 'Updating to &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;REPO&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sha&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.'&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git push --quiet origin &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DESTINATION_BRANCH&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pushed updated branch &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DESTINATION_BRANCH&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to GitHub Pages&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(the whole file is available &lt;a href=&quot;https://gist.github.com/128keaton/c7a2bb21ca225fe24b7b1beb4836ff4b&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;That there is a big-honkin mess.&lt;/p&gt;

&lt;p&gt;Basically, when Travis runs &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec rake site:deploy&lt;/code&gt;, it checks if its a PR, sets up git, makes sure the destination folder exists, pulls the site, checks out the source branch, builds the site, then commits and finally pushes the site. Phew!&lt;/p&gt;

&lt;p&gt;Here are the appropriate config.yml lines you‚Äôll need to add:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your-github-username&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;repo-name&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;source-branch&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;site/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you set this up correctly, pushing to GitHub should result in a successful Travis build and deploy.&lt;/p&gt;

&lt;p&gt;Now, onto the fun part: Images!&lt;/p&gt;

&lt;p&gt;In my Rakefile, I have two helper tasks:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:correct_posts&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Correcting blog posts'&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__dir__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/_posts/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.md'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.markdown'&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__dir__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/_posts/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fixed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'](https://images.128keaton.com/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'](https://images.128keaton.com/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fixed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__dir__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/_posts/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fixed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;site:upload&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:upload_images&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Uploading images..'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;recursive: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;password: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SSH_PASSWORD&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upload!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SSH_HOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SSH_USERNAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__dir__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/images/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/home/12/128keaton.com/html/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'All images have been upload and removed in '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IMAGES_DIR&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rm_rf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IMAGES_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first task checks all of my posts for any ‚Äòstale‚Äô image links, ones that were from olden blog times, or ones without my ‚ÄòCDN‚Äô before them. It simply prepends them and moves on. My second task actually uploads my images and deletes them from the repo so they aren‚Äôt sucked up by git. It simply uses Net::SCP to SCP them to my remote server. Not bad, huh?  I imagine anyone with time and some experience can rework that task to support anything they want, I just use my own hosting since its easy!&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;Although I don‚Äôt have a fully portable Jekyll setup as I‚Äôd like, I still think this is a really robust way to keep your site built how you want it (with logs!) and keep your images where you want them. A fun thing I can do is SSH into my home machine (or mount the site folder with SSHFS) on the go, write a post, and run another helper method &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec rake site:upload&lt;/code&gt;, which is like this:&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:upload&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Uploading site'&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`git log`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/[a-z0-9]{40}/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'git add --all .'&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git commit -m 'Updating to &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;REPO&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sha&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.'&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git push --quiet origin &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SOURCE_BRANCH&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pushed updated branch &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SOURCE_BRANCH&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to GitHub Pages&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Couple this with some Atom Jekyll plugins, and it makes working with Jekyll a lot more enjoyable day-to-day.&lt;/p&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mfenner/jekyll-travis&quot;&gt;Original repo that pointed me in the right direction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@nthgergo/publishing-gh-pages-with-travis-ci-53a8270e87db&quot;&gt;Medium post that helped conjure up the thought&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="travis," /><category term="jekyll," /><category term="blog," /><category term="github" /><summary type="html">Preface: When I first started blogging with Jekyll, my setup was a wreck. I didn‚Äôt quite understand Liquid Templating, so there wasn‚Äôt a lot a reuse, tons of unnecessary CSS, and plenty of plain ol‚Äô HTML kludges. I still really liked Jekyll. It was fast, hosting for it was cheap, and free if you used GitHub Pages, which I didn‚Äôt at the time. The two things I didn‚Äôt like about Jekyll was the lack of portability, and of easy publishing.</summary></entry><entry><title type="html">iOS 6 in 2016</title><link href="/2017/01/20/ios-6-in-2016.html" rel="alternate" type="text/html" title="iOS 6 in 2016" /><published>2017-01-20T04:32:31+00:00</published><updated>2017-01-20T04:32:31+00:00</updated><id>/2017/01/20/ios-6-in-2016</id><content type="html" xml:base="/2017/01/20/ios-6-in-2016.html">&lt;p&gt;First let me preface this ‚Äòreview‚Äô by stating that I actually didn‚Äôt use iOS 6 for the duration of this test because I &lt;em&gt;couldn‚Äôt&lt;/em&gt;. Not because it was unusable in the standard sense, when I purchased the phone, I failed to realize that it was a GSM/AT&amp;amp;T only phone, missing the bands for CDMA carriers, like mine, Verizon. Still I used it as much as I could, barring things that required cellular service, i.e. actual texts and phone calls.&lt;/p&gt;

&lt;p&gt;Now, lets delve into the review.&lt;/p&gt;

&lt;h2 id=&quot;the-review-unit&quot;&gt;The Review Unit&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;iPhone 5, 16GB, black&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;back in black!! not that slate crap&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/iphone_ios_6/IMG_1068.JPG#stylized&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The iPhone 7 ‚Äòmatte black‚Äô before it was cool! Ladies and gentleman, feast your eyes on what $98 netted me on the Ebay. Before I continue, I wanna say that this is my THIRD phone to have purchased. The first one, even though it was told that I‚Äôd receive the photos EXACTLY how the pictures depicted it, and was even assured that it would not be updated, it was, to fateful iOS 10. The second unit was pretty good, it was kinda junky, but it &lt;em&gt;worked&lt;/em&gt;, until it didn‚Äôt üòû. Long story short, both were refunded, and I finally said ‚Äòenough‚Äô, and bought one on iOS 6.1.4. Some might not like the pate√±a look on their iPhone, but the slate just &lt;em&gt;damages&lt;/em&gt; so well.&lt;/p&gt;

&lt;p&gt;John Gruber, on the black iPhone 5:&lt;/p&gt;

&lt;div class=&quot;notice--quote&quot;&gt;
The ‚Äúslate‚Äù anodization did show wear and tear as the year went by, but I liked the effect. Like a good pair of jeans or a leather watch strap.
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/iphone_ios_6/IMG_1069.JPG#stylized-small&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://images.128keaton.com/iphone_ios_6/IMG_1070.JPG#stylized-small&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://images.128keaton.com/iphone_ios_6/IMG_1071.JPG#stylized-small&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;üòçüòçüòçüòç&lt;/p&gt;

&lt;p&gt;I just love it. Now, I do like the feel of the phone, but I really enjoy the size and shape of the 7+ better. Plus, the camera is stellar (though the 5‚Äôs is nothing to hock a loogie at). So  a SE isn‚Äôt for me, plus the 5 has something that the SE never will: iOS 6.&lt;/p&gt;

&lt;h3 id=&quot;oh-these-just-images-from-my-5&quot;&gt;oh, these? just images from my 5:&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/iphone_ios_6/IMG_0013.JPG#stylized-small&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://images.128keaton.com/iphone_ios_6/IMG_0014.JPG#stylized-small&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://images.128keaton.com/iphone_ios_6/IMG_0015.JPG#stylized-small&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Not bad, eh?&lt;/p&gt;

&lt;h2 id=&quot;ios-6-applications&quot;&gt;iOS 6: Applications&lt;/h2&gt;

&lt;p&gt;Now, I am a simple man, I don‚Äôt do much outside of basic stuff.&lt;/p&gt;

&lt;p&gt;Here is a table of applications that I use enough to consider ‚Äòessential‚Äô (outside of system apps):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Application&lt;/th&gt;
      &lt;th&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Snapchat&lt;/td&gt;
      &lt;td&gt;üòµ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Mactracker&lt;/td&gt;
      &lt;td&gt;üòÅ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hangouts&lt;/td&gt;
      &lt;td&gt;üòÅ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BofA&lt;/td&gt;
      &lt;td&gt;üòµ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ebay&lt;/td&gt;
      &lt;td&gt;üòÅ&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Netflix&lt;/td&gt;
      &lt;td&gt;üòÅ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;See, I‚Äôm simple! Even me losing Snapchat is no biggie! No nudes for me!&lt;/p&gt;

&lt;p&gt;Hangouts works fine, I can talk with my co-workers who don‚Äôt wanna use Slack. Another good app with iOS 6 support is Telegram. Netflix is a web wrapper (which explains ALOT, y‚Äôall, nativity is fine!). Even a couple of games worked without having to downgrade.&lt;/p&gt;

&lt;h2 id=&quot;ios-6-speed&quot;&gt;iOS 6: Speed.&lt;/h2&gt;

&lt;p&gt;Now, it may be placebo (placky-bow), but holy lingonberries, iOS 6 is &lt;em&gt;fast&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The animations in iOS 10 surely slow it down, but the content just feels snappier, plus having a UI designed to mimic &lt;a href=&quot;https://dribbble.com/shots/995953-Bus-Schedule-App&quot;&gt;real-world&lt;/a&gt; objects is just &lt;strong&gt;tasty&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Boot-up time is slower than my 7+, and Cydia doesn‚Äôt have multitasking support in iOS 6, but typing never lags, the multitasking switcher is instant, plus I‚Äôve yet to see a frame drop. It is also interesting to think that this has 1GB of RAM, while the flagship Apple iDevice (the non &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; variant, at least) has 2GB. Hmm. Real-world ‚Äòspeed‚Äô is also pretty decent, clocking in at 721 on the ‚ÄòSingle Core‚Äô Geekbench, as you can see &lt;a href=&quot;http://browser.primatelabs.com/geekbench3/8221245&quot;&gt;here&lt;/a&gt;, coming very close to a late 2008 MacBook Pro 15‚Äù and a Google Indexing Server (well, just look, bleh), and beating an IBM Thinkpad X51, which is quite cool, considering the power in your pocket beats the power on your lap and in your office from seven years ago.&lt;/p&gt;

&lt;p&gt;Part of me thinks that mobile OS and web designers have gotten lazy, the amount of RAM and processing power has increased so that we can easily &lt;em&gt;be&lt;/em&gt; lazy, but thats just personal opinion.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-it-up&quot;&gt;Wrapping it up.&lt;/h2&gt;

&lt;p&gt;Overall, I think using an iPhone 5 in iOS 6 is still an easy task, and it can be enjoyable if you really think that iOS 6 is beautiful like I do. The hardware is solid, a perfect mix of utilitarianism and industrial simplicity. Especially the black, really, its gorgeous. It is a cool throwback, though, a time when Steve Jobs had some say in the design, no doubt on his deathbed he was hem-ing and haw-ing over little details. This is pre-Yosemite, or pre-San Francisco, a world of Helvetica-Neue washes over the entirety. Bringing this phone into this age with iOS 10 is near-criminal, kinda like having the good ol‚Äô farm dog pull the family carriage into town.&lt;/p&gt;

&lt;p&gt;That is the iPhone 5 today, the kinda scruffy, yet extremely lovable dog.&lt;/p&gt;

&lt;p&gt;If you use the dog for what it was designed for, like keeping it on iOS 6, it works! It just does!  iOS 6 is smooth, fluid, and has features to sate the average, and daresay, power user!&lt;/p&gt;

&lt;p&gt;I just think it was a waste of design, moving to iOS 7 so abruptly.&lt;/p&gt;

&lt;p&gt;If you disagree, leave a comment below and we‚Äôll talk.&lt;/p&gt;</content><author><name></name></author><summary type="html">First let me preface this ‚Äòreview‚Äô by stating that I actually didn‚Äôt use iOS 6 for the duration of this test because I couldn‚Äôt. Not because it was unusable in the standard sense, when I purchased the phone, I failed to realize that it was a GSM/AT&amp;amp;T only phone, missing the bands for CDMA carriers, like mine, Verizon. Still I used it as much as I could, barring things that required cellular service, i.e. actual texts and phone calls.</summary></entry><entry><title type="html">QEMU with an El Capitan Guest</title><link href="/2016/08/25/qemu-with-an-el-capitan-guest.html" rel="alternate" type="text/html" title="QEMU with an El Capitan Guest" /><published>2016-08-25T21:26:08+00:00</published><updated>2016-08-25T21:26:08+00:00</updated><id>/2016/08/25/qemu-with-an-el-capitan-guest</id><content type="html" xml:base="/2016/08/25/qemu-with-an-el-capitan-guest.html">&lt;div class=&quot;notice--info&quot;&gt;
  
&lt;h4 id=&quot;note&quot;&gt;Note:&lt;/h4&gt;
&lt;p&gt;This guide is largely based off &lt;a href=&quot;https://gist.github.com/gordonturner/2a2e5ecde5e7860b52e2&quot;&gt;https://gist.github.com/gordonturner/2a2e5ecde5e7860b52e2&lt;/a&gt;, but adapted for a newer Clover, QEMU, etc.&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;An Ubuntu Server running 16.04 LTS
    &lt;ul&gt;
      &lt;li&gt;KVM Capabilities&lt;/li&gt;
      &lt;li&gt;QEMU compiled/installed&lt;/li&gt;
      &lt;li&gt;OVMF compiled (&lt;a href=&quot;https://gist.github.com/gordonturner/85dcc321d2099d610e67&quot;&gt;https://gist.github.com/gordonturner/85dcc321d2099d610e67&lt;/a&gt;) and &lt;code class=&quot;highlighter-rouge&quot;&gt;/Build/OvmfX64/DEBUG_GCC49/FV/OVMF.fd&lt;/code&gt; put in the base folder of your VM (&lt;code class=&quot;highlighter-rouge&quot;&gt;bios.bin&lt;/code&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A supported Mac that can download 10.11.6 from the Mac App Store&lt;/li&gt;
  &lt;li&gt;A 8GB USB Drive&lt;/li&gt;
  &lt;li&gt;Clover EFI Bootloader&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-1-creating-the-install-drive&quot;&gt;Step 1, creating the install drive:&lt;/h2&gt;

&lt;p&gt;With your OS X installer app in /Applications/, run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/Applications/Install&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;OS&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;X&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;El&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Capitan.app/Contents/Resources/createinstallmedia &lt;span class=&quot;nt&quot;&gt;--volume&lt;/span&gt; /Volumes/Untitled &lt;span class=&quot;nt&quot;&gt;--applicationpath&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/Applications/Install OS X El Capitan.app&quot;&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Make sure you substitute &lt;code class=&quot;highlighter-rouge&quot;&gt;/Volumes/Untitled&lt;/code&gt; for your thumb drive (must be formatted as HFS+, GPT). Wait for it to complete, it will take a decent amount of time.&lt;/p&gt;

&lt;h2 id=&quot;step-2-installing-clover&quot;&gt;Step 2, installing Clover:&lt;/h2&gt;

&lt;p&gt;After downloading the Clover package, open it, and slowly click through until you see the ‚ÄòCustomize/Change Install Location‚Äô screen. Change the install location to the flash drive we just created, then click ‚ÄòContinue‚Äô, and then ‚ÄòCustomize‚Äô. You should have a list presented. Check the box beside ‚ÄòInstall for UEFI Booting Only‚Äô, and open the triangle next to ‚ÄòDriver64UEFI‚Äô. Check the boxes for &lt;code class=&quot;highlighter-rouge&quot;&gt;OsxAptioFixDrv-64&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DataHubDxe-64&lt;/code&gt;, then continue with the installation as normal. Now, the EFI partition should still be mounted (EFI in your sidebar). Download &lt;a href=&quot;https://github.com/JrCs/CloverGrowerPro/blob/9fc3991c7a82be1a0d096c3a2179098f35b69264/Files/HFSPlus/X64/HFSPlus.efi&quot;&gt;this&lt;/a&gt; file (HFSPlus.efi) and place it in /Volumes/EFI/EFI/CLOVER/drivers64UEFI/:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; ~/Downloads/HFSPlus.efi /Volumes/ESP/EFI/CLOVER/drivers64UEFI/
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;notice--info&quot;&gt;
   
&lt;h4 id=&quot;note&quot;&gt;Note:&lt;/h4&gt;
&lt;p&gt;If you want to have verbose boot (recommended), add &lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; to the BootFlags line in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/Volumes/ESP/EFI/CLOVER/config.plist&lt;/code&gt; file&lt;/p&gt;

 &lt;/div&gt;

&lt;h2 id=&quot;step-3-getting-the-osk-value&quot;&gt;Step 3, getting the OSK value:&lt;/h2&gt;

&lt;p&gt;Please see &lt;a href=&quot;https://gist.github.com/gordonturner/c33bcc935e32f9fa6695&quot;&gt;https://gist.github.com/gordonturner/c33bcc935e32f9fa6695&lt;/a&gt; to get the OSK value (must be run from an actual Apple computer). Save this string and keep it safe for later.&lt;/p&gt;

&lt;h2 id=&quot;step-4-writing-the-flash-drive-to-an-image&quot;&gt;Step 4, writing the flash drive to an image:&lt;/h2&gt;

&lt;p&gt;Unmount and eject the flash drive from your machine, and plug it back in. Then, unmount the install El Capitan partition. Now, fire up terminal, and type &lt;code class=&quot;highlighter-rouge&quot;&gt;diskutil list&lt;/code&gt;, find your install drive. (Should have two partitions: &lt;code class=&quot;highlighter-rouge&quot;&gt;EFI&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Install OS X El Capitan&lt;/code&gt;).  Record the disk number (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/disk8&lt;/code&gt;). &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; into a comfortable folder &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Desktop&lt;/code&gt;, and run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;nb&quot;&gt;sudo dd &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/rdiskX &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;clover-usb-disk.dd
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Making sure you substitute &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; for your disk number.&lt;/p&gt;

&lt;p&gt;After a bit of waiting, you should have a large file on your desktop named &lt;code class=&quot;highlighter-rouge&quot;&gt;clover-usb-disk.dd&lt;/code&gt;, using your own methods, move this file into the root of your vm folder on your server.&lt;/p&gt;

&lt;h2 id=&quot;step-5-final-setup&quot;&gt;Step 5, final setup:&lt;/h2&gt;

&lt;p&gt;Now, we absolutely have to be on the Linux machine. Either SSH in, or gain physical access.
At the command line, use this command in your root VM folder:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;qemu-img create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; qcow2 osx-disk0.qcow2 200G
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Substitute &lt;code class=&quot;highlighter-rouge&quot;&gt;200G&lt;/code&gt; for how many gigs you want, for 500Gb use &lt;code class=&quot;highlighter-rouge&quot;&gt;500G&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, something a bit different, in order for OS X to boot beyond the kernel, we have to disable something:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;su -
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;1 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /sys/module/kvm/parameters/ignore_msrs&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I didn‚Äôt do much research into why, but it is important to run that. It is reset every reboot, so putting &lt;code class=&quot;highlighter-rouge&quot;&gt;echo 1 &amp;gt; /sys/module/kvm/parameters/ignore_msrs&lt;/code&gt; into your &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/rc.local&lt;/code&gt; file might not be a bad idea.&lt;/p&gt;

&lt;h2 id=&quot;step-6-first-boot&quot;&gt;Step 6, first boot:&lt;/h2&gt;

&lt;p&gt;Ok, brace yourself, this is my command to start my VM:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;qemu-system-x86_64 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; 8192 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-enable-kvm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-cpu&lt;/span&gt; core2duo,vendor&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;GenuineIntel &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-rtc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;localtime &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-smbios&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-machine&lt;/span&gt; q35,accel&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kvm,usb&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;off,vmport&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;off &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-bios&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VMROOT$/&lt;/span&gt;bios.bin &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-smp&lt;/span&gt; 4,sockets&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1,cores&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2,threads&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; isa-applesmc,osk&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$OSK&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;$&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; i82801b11-bridge,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pci.1,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pcie.0,addr&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x1e &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; pci-bridge,chassis_nr&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pci.2,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pci.1,addr&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; ahci,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sata0,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pci.2,addr&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x5 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-drive&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VMROOT$/&lt;/span&gt;clover-usb-disk.dd,if&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;drive-sata0-0-2,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;raw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; ide-hd,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ide.2,drive&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;drive-sata0-0-2,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sata0-0-2,bootindex&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-drive&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VMROOT$/&lt;/span&gt;osx-disk0.qcow2,if&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none,media&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;disk,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;drive-sata0-0-0,format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;qcow2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; ide-hd,bus&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sata0.0,drive&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;drive-sata0-0-0,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sata0-0-0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-usb&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; usb-mouse &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; usb-kbd &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-full-screen&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-vnc&lt;/span&gt; :1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-netdev&lt;/span&gt; bridge,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;br0,br&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;br0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; virtio-net,netdev&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;br0,vectors&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0,mac&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;00:00:00:00:00:00&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Overwhelmed? Probably. Ok, you need to change a couple of things. First, change the &lt;code class=&quot;highlighter-rouge&quot;&gt;$OSK$&lt;/code&gt; with your OSK string you saved earlier. Second, change the &lt;code class=&quot;highlighter-rouge&quot;&gt;$VMROOT$&lt;/code&gt; occurrences to whatever your VM root is.&lt;/p&gt;

&lt;div class=&quot;notice--info&quot;&gt;
   
&lt;h4 id=&quot;note&quot;&gt;Note:&lt;/h4&gt;
&lt;p&gt;networking is a bit of a beast, but I know you can get it working. I won‚Äôt be covering it, but the &lt;a href=&quot;https://github.com/pmj/virtio-net-osx&quot;&gt;virtio-net&lt;/a&gt; driver will help.&lt;/p&gt;

 &lt;/div&gt;

&lt;p&gt;After those edits, put it into the command line, and cross your fingers.&lt;/p&gt;

&lt;h2 id=&quot;step-7-connecting-and-installing&quot;&gt;Step 7, connecting and installing:&lt;/h2&gt;

&lt;p&gt;Now you need to connect to the VNC server that QEMU is hosting for your VM. For OS X, I use &lt;em&gt;Chicken of the VNC&lt;/em&gt;, because the Screen Sharing app doesn‚Äôt work with the server. Connect to your IP, and port &lt;code class=&quot;highlighter-rouge&quot;&gt;5901&lt;/code&gt;. You should see either the Apple boot screen, the Setup companion, or Clover, depending on how fast you setup your VNC client.&lt;/p&gt;

&lt;div class=&quot;notice--info&quot;&gt;
   
&lt;h4 id=&quot;note&quot;&gt;Note:&lt;/h4&gt;
&lt;p&gt;screen/mouse mapping is broken over the QEMU VNC, you can get through the installer using Tab, Space, and Enter. The same person who wrote the network driver is working on a fix &lt;a href=&quot;https://github.com/pmj/QemuUSBTablet-OSX&quot;&gt;here&lt;/a&gt;&lt;/p&gt;


 &lt;/div&gt;

&lt;p&gt;Use Disk Utility in the installer to format the QEMU HDD, and then run through the installer as normal.&lt;/p&gt;

&lt;p&gt;Done!&lt;/p&gt;

&lt;h3 id=&quot;other&quot;&gt;Other:&lt;/h3&gt;

&lt;p&gt;If you want to access the Clover drive to make some changes, follow &lt;a href=&quot;https://gist.github.com/gordonturner/2a2e5ecde5e7860b52e2#efi-disk-image-manipulation&quot;&gt;this&lt;/a&gt; guide to do that.&lt;/p&gt;

&lt;p&gt;If you are having issues, feel free to comment below:&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Power Macintosh 8500 Web Server</title><link href="/2016/06/07/power-macintosh-8500-web-server.html" rel="alternate" type="text/html" title="Power Macintosh 8500 Web Server" /><published>2016-06-07T22:22:55+00:00</published><updated>2016-06-07T22:22:55+00:00</updated><id>/2016/06/07/power-macintosh-8500-web-server</id><content type="html" xml:base="/2016/06/07/power-macintosh-8500-web-server.html">&lt;p&gt;Well, I went and did it. I made my Power Macintosh 8500 into a Debian web server.
Installing Debian was a bit harder than expected, but thanks to the BootX software, it was eventually installed. The biggest issue was just getting all of the kernels in place.
Here is how my setup works:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SCSI drive has a Mac OS 9.1 install, with the BootX app inside of the System Folder.&lt;/li&gt;
  &lt;li&gt;ATA card, for my CD drive, and my ATA drive containing the Debian install.&lt;/li&gt;
  &lt;li&gt;96MB of RAM in the machine, which is 6MB from the bare minimum for installing/booting Debian.
*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I basically just booted the install CD, installed Debian to the ATA drive, shut down the machine, grabbed the kernels off the ATA drive, put them into the folder for BootX, and rebooted into the ATA drive. Also, Debian wouldn‚Äôt detect my ethernet port, so I just installed a PCI-X Gigabit card with dual NICs. BootX is great, it really makes this install easier. I couldn‚Äôt get the extension to work without the ‚Äòunexpected trap‚Äô error. I can just boot fully into OS 9, then into Debian. You can visit the web server‚Äôs homepage here: &lt;a href=&quot;http://play.128keaton.com:82/about/&quot;&gt;http://play.128keaton.com:82/about/&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;q--a&quot;&gt;Q &amp;amp; A:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Q: What about security?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A: This is literally running the latest version of Debian and Apache2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q: Well, why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A: Why not? It was a lot of fun, and quite a challenge.&lt;/p&gt;</content><author><name></name></author><summary type="html">Well, I went and did it. I made my Power Macintosh 8500 into a Debian web server. Installing Debian was a bit harder than expected, but thanks to the BootX software, it was eventually installed. The biggest issue was just getting all of the kernels in place. Here is how my setup works:</summary></entry><entry><title type="html">Baking a 2007 MacBook Pro‚Äôs Logic Board</title><link href="/2016/05/30/baking-a-2007-macbook-pro-s-logic-board.html" rel="alternate" type="text/html" title="Baking a 2007 MacBook Pro's Logic Board" /><published>2016-05-30T22:47:00+00:00</published><updated>2016-05-30T22:47:00+00:00</updated><id>/2016/05/30/baking-a-2007-macbook-pro-s-logic-board</id><content type="html" xml:base="/2016/05/30/baking-a-2007-macbook-pro-s-logic-board.html">&lt;p&gt;It is not everyday you see someone putting an expensive piece of technology inside of a conventional household oven. But then again, its is not everyday you have to reflow a component.
&lt;em&gt;rock intro&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Anyway, I received a 2007 MacBook Pro 17‚Äù with a bad GPU. Sleep light comes on, no chime, etc. A somewhat common problem among the early MacBook Pro 3,1/4,1 and, the MacBook Pro 8,2, the GPU would desolder itself from the board. No, the GPU wouldn‚Äôt physically plop out. Enough solder joints (thanks lead-free) would weaken and disconnect to cause the issue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.playbackups.com/photos/bga-side-diagram.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The photo above is a simple diagram explaining basic BGA soldering. Those balls are what we are remelting (inside of the oven) to allow a firm connection to be made.&lt;/p&gt;

&lt;p&gt;Anyway, I disassembled the MacBook Pro using iFixit‚Äôs Logic Board Replacement guide, and began the process of baking. I wouldn‚Äôt consider this too outlandish, just because it does work,
but it isn‚Äôt permanent. An &lt;del&gt;idiotic&lt;/del&gt; butthurt friend did this and still plays video games on it (Battlefield, and other taxing games) and it happened again relatively quick.
 If you keep it from becoming stupid hot, you‚Äôll be fine. Mine idles at 28 degrees Celsius. Anyway, back to baking. I put my board on a tray, on four tin foil balls. 400 degrees Fahrenheit for 10 minutes.&lt;/p&gt;

&lt;p&gt;What I should‚Äôve done (from a friend):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Placed a sheet of foil underneath&lt;/li&gt;
  &lt;li&gt;Cleaned the tray&lt;/li&gt;
  &lt;li&gt;Removed the thermal paste from the board.&lt;/li&gt;
  &lt;li&gt;Placed one more foil ball underneath a corner.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But I didn‚Äôt, and thankfully, it turned out ok.&lt;/p&gt;

&lt;p&gt;Before baking:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/2016/05/Slack for iOS Upload-5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/2016/05/Now just waiting to cool.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, there is a bit of board flex. Whoops. Make sure you put a piece of foil under that corner.&lt;/p&gt;

&lt;p&gt;Success:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/2016/05/screen_shot_2016-05-27_at_9.16.21_am.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hope this helps someone!&lt;/p&gt;

&lt;p&gt;Edit: friend‚Äôs response to this post:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/2016/06/hahahjon.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">It is not everyday you see someone putting an expensive piece of technology inside of a conventional household oven. But then again, its is not everyday you have to reflow a component. rock intro</summary></entry><entry><title type="html">Happy as a Clam</title><link href="/2016/05/20/happy-as-a-clam.html" rel="alternate" type="text/html" title="Happy as a Clam" /><published>2016-05-20T00:39:48+00:00</published><updated>2016-05-20T00:39:48+00:00</updated><id>/2016/05/20/happy-as-a-clam</id><content type="html" xml:base="/2016/05/20/happy-as-a-clam.html">&lt;p&gt;A while back, about a month, I was presented with the opportunity to swap computers. A PowerBook Ti for a Clamshell. At the time, I had two Ti books, one 500MHz, original, fully loaded with AirPort card. A really nice machine, but at the same time, I really wanted an iBook G3 Clamshell. I had never seen one. I had never touched one. For those who do not know what an iBook ‚ÄòClamshell‚Äô is, here is a pic:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://appleclamshell.files.wordpress.com/2013/08/steve-jobs-apple-ibook-picture.jpg&quot; alt=&quot;Stevie loves clammy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is a rather massive laptop, and to PC users, it a giant toilet seat, but few can appreciate the gentle curves, resembling a seashell, or a clamshell.&lt;/p&gt;

&lt;p&gt;Here it is, again, showcasing how MASSIVE it is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2npbuaakacvlz.cloudfront.net/images/uploaded/large-present/welcome-to-the-family/DSC_0612.JPG&quot; alt=&quot;15&amp;quot; MBP vs Clamshell&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although it is a very large device, the OS is trapped inside a tiny screen. 800x600, ouch! Luckily, there is a modification that allows you to put a much larger screen inside the later model.
Back to the story. I ended up shipping the TiBook, and two days later receiving an Indigo Clamshell, sans battery. After a ‚Äòquick‚Äô hard drive replacement (5GB 4200 RPM, V.S. 60GB 7200 RPM), I installed OS X 10.4.11 and OS 9.2.1. and simply enjoyed it. I was limited by the lack of battery, but it was still a hoot!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fast forward to yesterday&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I was at work, and a package came in for me. I figured it would be a PoE switch for resetting Cisco phones. Nope! A bright orange Clamshell met my eyes. A mutual friend, inside of the company, spotted this at his location, and shipped it to me. What a surprise! Said co-worker was throughly thanked!
Within a month, I got two clamshells, one of the most desired vintage laptop, to date.&lt;/p&gt;</content><author><name></name></author><summary type="html">A while back, about a month, I was presented with the opportunity to swap computers. A PowerBook Ti for a Clamshell. At the time, I had two Ti books, one 500MHz, original, fully loaded with AirPort card. A really nice machine, but at the same time, I really wanted an iBook G3 Clamshell. I had never seen one. I had never touched one. For those who do not know what an iBook ‚ÄòClamshell‚Äô is, here is a pic:</summary></entry><entry><title type="html">A look at the OS X 10.7 Beta</title><link href="/2016/05/17/a-look-at-the-os-x-107-beta.html" rel="alternate" type="text/html" title="A look at the OS X 10.7 Beta" /><published>2016-05-17T04:08:35+00:00</published><updated>2016-05-17T04:08:35+00:00</updated><id>/2016/05/17/a-look-at-the-os-x-107-beta</id><content type="html" xml:base="/2016/05/17/a-look-at-the-os-x-107-beta.html">&lt;p&gt;Today, I received a copy of the later 10.7 Beta, build 11A390. The date on the install CD is 2011, and for those who do not know, Lion was officially released July of 2011.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.128keaton.com/2016/05/Slack for iOS Upload.jpg&quot; alt=&quot;Lion 2011 Beta&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Quickly, I pulled out my trusty 2009 Black MacBook to do a test install. I did, however, try anyway on my MacBookPro1,1, just in case we had a 32-bit EFI bootloader. On initial glance at the DVD, which init of itself is quite amazing, since Lion was never sold on one. Only digital download or on a $20 USB stick (which I own too), there wasn‚Äôt any welcome documentation, nor was there the Lion install icon, but something more generic instead.&lt;/p&gt;

&lt;p&gt;Just X&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/2016/05/Screen Shot 2016-05-16 at 4.27.18 PM.png&quot; alt=&quot;Install Disc&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Anyway, onto installing. I booted into the installer, and was greeted by the modern ‚ÄòOS X Utilities‚Äô, but had stylings stuck between Snow Leopard and Lion.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/2016/05/IMG_1819.JPG&quot; alt=&quot;Mac OS X Utilities&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another weird thing inside of Disk Utility:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/2016/05/IMG_1821.JPG&quot; alt=&quot;UISegmentedControl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The segment control was nothing like I‚Äôve seen before.&lt;/p&gt;

&lt;p&gt;Anyway, post installation time, time for setup. We did get the lovely welcome video from Leopard, which was refreshing, even after hearing it a billion times.&lt;/p&gt;

&lt;p&gt;First, the background wasn‚Äôt the sterile gray, we had a nice picture of Mt. Fiji:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/2016/05/IMG_1825.JPG&quot; alt=&quot;Mt Feejee&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I personally think it looks far better, I never noticed how nice that pic looks.&lt;/p&gt;

&lt;p&gt;Then, it gave me the option to add encrypt my disk, something not implemented until 10.10. I wonder why they didn‚Äôt do it when they had the option to.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/2016/05/IMG_1827.JPG&quot; alt=&quot;Yosemite? Anyone?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I opted not to, just in case some odd bug arose, which prevented me from exploring the rest of the operating system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/2016/05/IMG_1828.JPG&quot; alt=&quot;Without the crap scrolling&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;desktop&quot;&gt;Desktop&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/2016/05/Screen Shot 2016-05-16 at 10.01.10 PM.png&quot; alt=&quot;The desktop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we are at the desktop of 10.7, beta! Take note of the Launchpad icon.
Quite ugly, glad it was changed.&lt;/p&gt;

&lt;p&gt;I went to About My Mac-&amp;gt;More Info, just to see the build number, and was greeted by this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/2016/05/Screen Shot 2016-05-16 at 10.01.55 PM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some weird mutant view. I do kinda like it though, not the icons.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/2016/05/Screen Shot 2016-05-16 at 10.02.02 PM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The battery view is very nice, I could definitely see this making a come back, maybe with an overall battery health meter, a la CoconutBattery?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/2016/05/Screen Shot 2016-05-16 at 10.05.52 PM.png&quot; alt=&quot;TM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Time Machine also had a few surprises, it had the option to store hourly snapshots locally, and daily backups on a Time Machine drive/server. Once again, if properly working, I‚Äôd love that to make a reappearance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.128keaton.com/2016/05/Screen Shot 2016-05-16 at 10.07.23 PM.png&quot; alt=&quot;Software updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oh, I should probably update that :)&lt;/p&gt;

&lt;p&gt;That about wraps it up.&lt;/p&gt;</content><author><name></name></author><summary type="html">Today, I received a copy of the later 10.7 Beta, build 11A390. The date on the install CD is 2011, and for those who do not know, Lion was officially released July of 2011.</summary></entry></feed>